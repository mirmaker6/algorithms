#  1. Проанализировать скорость и сложность одного - трёх любых алгоритмов,
# разработанных в рамках домашнего задания первых трех уроков.
#  1_2_4. Найти сумму n элементов следующего ряда чисел: 1 -0.5 0.25 -0.125 ...
#  Количество элементов (n) вводится с клавиатуры.

# 3 варианта одной задачи

# Python 3.6.6
# OS - 64bit

from count_size import count_size


n = int(input('Введите n: '))


def var_sum(var_lst):
    summa = 0
    for i in var_lst:
        summa += count_size(i)
    print(f'Под переменные задействованно {summa} байт памяти')


sum_ = 0
for i in range(n):
    sum_ += (-1) ** i / 2 ** i

var_sum([sum_, i])
# Под переменные задействованно 52 байт памяти
# 24 + 28(?) = 52 все верно
# Итерируемая переменная в цикле занимает больше памяти (может больше ссылок?)


item = 1
summ = 0
for _ in range(n):
    summ += item
    item /= -2

var_sum([item, summ, _])

# Под переменные задействованно 76 байт памяти
# 24 + 24 + 28 = 76 все верно

summa_2 = 1 * (1 - (-0.5) ** n) / (1 - (-0.5))

var_sum([summa_2])
# Под переменные задействованно 24 байт памяти
# Очевидно, что по памяти эффективнее программа с одной переменной
