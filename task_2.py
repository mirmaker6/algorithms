# 2. Выполнить логические побитовые операции «И», «ИЛИ» и др. над числами 5 и 6.
# Выполнить над числом 5 побитовый сдвиг вправо и влево на два знака.
# Объяснить полученный результат

a = 5
b = 6
print('Формат вывода:\tЧисло(система счисления)')
print(f'5(10) == {bin(a)}(2)') #0b101
print(f'6(10) == {bin(b)}(2)') #0b110
# & битовое И (AND)
# Выполняем сравнение and для каждого бита числа
# 0b101
# 0b110
# 0b100
print(f'Битовое 5 AND 6 \t {a & b}(10) == {bin(a & b)}(2)')
# | битовое ИЛИ (OR)
# Выполняем сравнение or для каждого бита числа
# 0b101
# 0b110
# 0b111
print(f'Битовое 5 OR 6 \t\t {a | b}(10) == {bin(a | b)}(2)')
# ^ битовое ИСКЛЮЧАЮЩЕЕ ИЛИ (XOR)
# Выполняем сравнение xor для каждого бита числа
# 0b101
# 0b110
# 0b011
print(f'Битовое 5 XOR 6 \t {a ^ b}(10) == {bin(a ^ b)}(2)')
# ~ битовое ОТРИЦАНИЕ (NOT)
# Выполняем сравнение NOT для каждого бита числа с заменой ВСЕХ нулей
# 0b101
# 0b1...11111010 == -0b110
print(f'Битовое NOT 5 \t\t {~ a}(10) == {bin(~ a)}(2)')
# 0b110
# 0b1...11111001 == -0b111
print(f'Битовое NOT 6 \t\t {~ b}(10) == {bin(~ b)}(2)')
# >> битовый сдвиг вправо
# двигаем биты вправо и отбрасываем лишние
# 0b110
# 0b1
print(f'Битовый сдвиг 5 на два знака вправо \t{b >> 2}(10) == {bin(b >> 2)}(2)')
# >> битовый сдвиг влево
# двигаем биты влево и дорисовываем нули
# 0b110
# 0b11000
print(f'Битовый сдвиг 5 на два знака влево \t\t{b << 2}(10) == {bin(b << 2)}(2)')

